diff -crBN -x '*.svn*' ../android-release-2.8/res/menu/nowplaying.xml ./res/menu/nowplaying.xml
*** ../android-release-2.8/res/menu/nowplaying.xml	2011-06-15 14:47:25.000000000 -0700
--- ./res/menu/nowplaying.xml	2011-06-16 12:10:21.000000000 -0700
***************
*** 18,22 ****
          a:icon="@drawable/ic_menu_remove_all"
          a:title="@string/download.menu_remove_all"
          />
!         
  </menu>
--- 18,27 ----
          a:icon="@drawable/ic_menu_remove_all"
          a:title="@string/download.menu_remove_all"
          />
! 
!     <item 
!         a:id="@+id/menu_screen_option"
!         a:icon="@drawable/ic_menu_screen_option"
!         a:title="@string/download.menu_screen_option"
!         />        
  </menu>
diff -crBN -x '*.svn*' ../android-release-2.8/res/menu/queue_context.xml ./res/menu/queue_context.xml
*** ../android-release-2.8/res/menu/queue_context.xml	1969-12-31 16:00:00.000000000 -0800
--- ./res/menu/queue_context.xml	2011-06-17 08:34:06.000000000 -0700
***************
*** 0 ****
--- 1,7 ----
+ <?xml version="1.0" encoding="utf-8"?>
+ <menu xmlns:a="http://schemas.android.com/apk/res/android">
+     <item 
+         a:id="@+id/menu_queue_next"
+         a:title="@string/queue_context.queue_next"
+         />        
+ </menu>
\ No newline at end of file
diff -crBN -x '*.svn*' ../android-release-2.8/res/menu/select_song_context.xml ./res/menu/select_song_context.xml
*** ../android-release-2.8/res/menu/select_song_context.xml	1969-12-31 16:00:00.000000000 -0800
--- ./res/menu/select_song_context.xml	2011-06-16 14:51:54.000000000 -0700
***************
*** 0 ****
--- 1,19 ----
+ <?xml version="1.0" encoding="utf-8"?>
+ <menu xmlns:a="http://schemas.android.com/apk/res/android">
+ 
+     <item 
+         a:id="@+id/menu_play_now"
+         a:title="@string/select_song.play_now"
+         />
+ 
+     <item 
+         a:id="@+id/menu_play_next"
+         a:title="@string/select_song.play_next"
+         />
+ 
+     <item 
+         a:id="@+id/menu_play_last"
+         a:title="@string/select_song.play_last"
+         />
+         
+ </menu>
diff -crBN -x '*.svn*' ../android-release-2.8/res/values/strings.xml ./res/values/strings.xml
*** ../android-release-2.8/res/values/strings.xml	2011-06-15 14:47:23.000000000 -0700
--- ./res/values/strings.xml	2011-06-17 08:33:58.000000000 -0700
***************
*** 71,76 ****
--- 71,80 ----
      <string name="select_album.donate_dialog_now">Now</string>
      <string name="select_album.donate_dialog_later">Later</string>
      <string name="select_album.donate_dialog_0_trial_days_left">Trial period is over</string>
+     <string name="select_song.play_now">Play song now</string>
+     <string name="select_song.play_next">Play song next</string>
+     <string name="select_song.play_last">Play song last</string>    
+     <string name="queue_context.queue_next">Queue songs next</string>    
  
      <string name="select_playlist.empty">No saved playlists on server</string>
  
***************
*** 82,87 ****
--- 86,92 ----
      <string name="download.menu_lyrics">Lyrics</string>
      <string name="download.menu_remove">Remove song</string>
      <string name="download.menu_remove_all">Remove all</string>
+     <string name="download.menu_screen_option">Screen On</string>
      <string name="download.menu_shuffle">Shuffle</string>
      <string name="download.menu_save">Save playlist</string>
      <string name="download.menu_shuffle_notification">Playlist was shuffled</string>
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/DownloadActivity.java ./src/net/sourceforge/subsonic/androidapp/activity/DownloadActivity.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/DownloadActivity.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/activity/DownloadActivity.java	2011-06-21 12:26:16.000000000 -0700
***************
*** 31,43 ****
--- 31,48 ----
  import android.os.Bundle;
  import android.os.Handler;
  import android.view.ContextMenu;
+ import android.view.Display;
+ import android.view.GestureDetector;
+ import android.view.GestureDetector.OnGestureListener;
  import android.view.LayoutInflater;
  import android.view.Menu;
  import android.view.MenuInflater;
  import android.view.MenuItem;
+ import android.view.MotionEvent;
  import android.view.View;
  import android.view.ViewGroup;
  import android.view.Window;
+ import android.view.WindowManager;
  import android.view.animation.AnimationUtils;
  import android.widget.AdapterView;
  import android.widget.ArrayAdapter;
***************
*** 63,69 ****
  
  import static net.sourceforge.subsonic.androidapp.domain.PlayerState.*;
  
! public class DownloadActivity extends SubsonicTabActivity {
  
  	/*
      private static final int MENU_ITEM_SHOW_ALBUM = 1;
--- 68,74 ----
  
  import static net.sourceforge.subsonic.androidapp.domain.PlayerState.*;
  
! public class DownloadActivity extends SubsonicTabActivity implements OnGestureListener {
  
  	/*
      private static final int MENU_ITEM_SHOW_ALBUM = 1;
***************
*** 75,80 ****
--- 80,86 ----
      */
  
      private static final int DIALOG_SAVE_PLAYLIST = 100;
+     private static final int PERCENTAGE_OF_SCREEN_FOR_SWIPE = 5;
  
      private ViewFlipper playlistFlipper;
      private ViewFlipper buttonBarFlipper;
***************
*** 100,105 ****
--- 106,113 ----
      private DownloadFile currentPlaying;
      private long currentRevision;
      private EditText playlistNameView;
+     private GestureDetector gestureScanner;
+     private int swipe_distance = 0, swipe_velocity = 0;
  
      /**
       * Called when the activity is first created.
***************
*** 109,114 ****
--- 117,128 ----
          super.onCreate(savedInstanceState);
          setContentView(R.layout.download);
  
+         WindowManager w = getWindowManager();
+         Display d = w.getDefaultDisplay();
+         swipe_distance = (d.getWidth() + d.getHeight()) * PERCENTAGE_OF_SCREEN_FOR_SWIPE / 100; 
+         swipe_velocity = (d.getWidth() + d.getHeight()) * PERCENTAGE_OF_SCREEN_FOR_SWIPE / 100; 
+         gestureScanner = new GestureDetector(this);
+         
          playlistFlipper = (ViewFlipper) findViewById(R.id.download_playlist_flipper);
          buttonBarFlipper = (ViewFlipper) findViewById(R.id.download_button_bar_flipper);
          emptyTextView = (TextView) findViewById(R.id.download_empty);
***************
*** 129,135 ****
          shuffleButton = findViewById(R.id.download_shuffle);
          repeatButton = (ImageButton) findViewById(R.id.download_repeat);
          toggleListButton = findViewById(R.id.download_toggle_list);
! 
          albumArtImageView.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
--- 143,190 ----
          shuffleButton = findViewById(R.id.download_shuffle);
          repeatButton = (ImageButton) findViewById(R.id.download_repeat);
          toggleListButton = findViewById(R.id.download_toggle_list);
!         
!         previousButton.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         nextButton.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         pauseButton.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         stopButton.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         startButton.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         buttonBarFlipper.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         emptyTextView.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         albumArtImageView.setOnTouchListener(new View.OnTouchListener() {
!             public boolean onTouch(View v, MotionEvent me) {
!             	return gestureScanner.onTouchEvent(me);
!             }
!         });
!         
          albumArtImageView.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
***************
*** 264,269 ****
--- 319,329 ----
          onCurrentChanged();
          onProgressChanged();
          scrollToCurrent();
+     	if (getDownloadService().getScreenOff()) {
+     		this.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+     	} else {
+     		this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+     	}
      }
  
      // Scroll to current playing/downloading.
***************
*** 351,356 ****
--- 411,422 ----
          boolean savePlaylistEnabled = !Util.isOffline(this);
          savePlaylist.setEnabled(savePlaylistEnabled);
          savePlaylist.setVisible(savePlaylistEnabled);
+         MenuItem screenOption = menu.findItem(R.id.menu_screen_option);
+         if (getDownloadService().getScreenOff()) {
+         	screenOption.setTitle("Screen On");
+         } else {
+         	screenOption.setTitle("Screen Off");
+         }
          return super.onPrepareOptionsMenu(menu);
      }
  
***************
*** 409,414 ****
--- 475,489 ----
                  getDownloadService().clear();
                  onDownloadListChanged();
                  return true;
+             case R.id.menu_screen_option:
+             	if (getDownloadService().getScreenOff()) {
+             		this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+             		getDownloadService().setScreenOff(false);
+             	} else {
+             		this.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+             		getDownloadService().setScreenOff(true);
+             	}
+                 return true;
              case R.id.menu_shuffle:
                  getDownloadService().shuffle();
                  Util.toast(this, R.string.download_menu_shuffle_notification);
***************
*** 466,471 ****
--- 541,547 ----
      }
  
      private void toggleFullscreenAlbumArt() {
+     	scrollToCurrent();
          if (playlistFlipper.getDisplayedChild() == 1) {
              playlistFlipper.setInAnimation(AnimationUtils.loadAnimation(this, R.anim.push_down_in));
              playlistFlipper.setOutAnimation(AnimationUtils.loadAnimation(this, R.anim.push_down_out));
***************
*** 632,635 ****
--- 708,766 ----
              return view;
          }
      }
+ 
+     @Override
+     public boolean onTouchEvent(MotionEvent me) {
+         return gestureScanner.onTouchEvent(me);
+     }
+ 
+ 	@Override
+ 	public boolean onDown(MotionEvent arg0) {
+ 		// TODO Auto-generated method stub
+ 		return false;
+ 	}
+ 
+ 	@Override
+ 	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
+ 			float velocityY) {
+ 		// Right to Left swipe
+ 		if (((e1.getX() - e2.getX()) > swipe_distance) && Math.abs(velocityX) > swipe_velocity) {
+             warnIfNetworkOrStorageUnavailable();
+             getDownloadService().previous();
+             onCurrentChanged();
+             onProgressChanged();
+ 			return true;
+ 		}
+ 		// Left to Right swipe
+ 		if (((e2.getX() - e1.getX()) > swipe_distance) && Math.abs(velocityX) > swipe_velocity) {
+             warnIfNetworkOrStorageUnavailable();
+             if (getDownloadService().getCurrentPlayingIndex() < getDownloadService().size() - 1) {
+                 getDownloadService().next();
+                 onCurrentChanged();
+                 onProgressChanged();
+             }
+ 			return true;
+ 		}
+ 
+ 		return false;
+ 	}
+ 
+ 	@Override
+ 	public void onLongPress(MotionEvent e) {
+ 	}
+ 
+ 	@Override
+ 	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
+ 			float distanceY) {
+ 		return false;
+ 	}
+ 
+ 	@Override
+ 	public void onShowPress(MotionEvent e) {		
+ 	}
+ 
+ 	@Override
+ 	public boolean onSingleTapUp(MotionEvent e) {
+ 		return false;
+ 	}
  }
\ No newline at end of file
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SearchActivity.java ./src/net/sourceforge/subsonic/androidapp/activity/SearchActivity.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SearchActivity.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/activity/SearchActivity.java	2011-06-17 09:30:44.000000000 -0700
***************
*** 354,360 ****
              if (!append) {
                  downloadService.clear();
              }
!             downloadService.download(Arrays.asList(song), save, false);
              if (autoplay) {
                  downloadService.play(downloadService.size() - 1);
              }
--- 354,360 ----
              if (!append) {
                  downloadService.clear();
              }
!             downloadService.download(Arrays.asList(song), save, false, false);
              if (autoplay) {
                  downloadService.play(downloadService.size() - 1);
              }
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SelectAlbumActivity.java ./src/net/sourceforge/subsonic/androidapp/activity/SelectAlbumActivity.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SelectAlbumActivity.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/activity/SelectAlbumActivity.java	2011-06-17 10:22:03.000000000 -0700
***************
*** 114,134 ****
          playButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(false, false, true);
                  selectAll(false, false);
              }
          });
          queueButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(true, false, false);
                  selectAll(false, false);
              }
          });
          saveButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(true, true, false);
                  selectAll(false, false);
              }
          });
--- 114,134 ----
          playButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(false, false, true, false);
                  selectAll(false, false);
              }
          });
          queueButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(true, false, false, false);
                  selectAll(false, false);
              }
          });
          saveButton.setOnClickListener(new View.OnClickListener() {
              @Override
              public void onClick(View view) {
!                 download(true, true, false, false);
                  selectAll(false, false);
              }
          });
***************
*** 141,146 ****
--- 141,147 ----
          });
  
          registerForContextMenu(entryList);
+         registerForContextMenu(queueButton);
  
          enableButtons();
  
***************
*** 197,203 ****
              downloadRecursively(id, false, false, true);
          } else {
              selectAll(true, false);
!             download(false, false, true);
              selectAll(false, false);
          }
      }
--- 198,204 ----
              downloadRecursively(id, false, false, true);
          } else {
              selectAll(true, false);
!             download(false, false, true, false);
              selectAll(false, false);
          }
      }
***************
*** 212,243 ****
      @Override
      public void onCreateContextMenu(ContextMenu menu, View view, ContextMenu.ContextMenuInfo menuInfo) {
          super.onCreateContextMenu(menu, view, menuInfo);
! 
!         AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
!         MusicDirectory.Entry entry = (MusicDirectory.Entry) entryList.getItemAtPosition(info.position);
!         if (entry.isDirectory()) {
              MenuInflater inflater = getMenuInflater();
!             inflater.inflate(R.menu.select_album_context, menu);
!         }
      }
  
      @Override
      public boolean onContextItemSelected(MenuItem menuItem) {
!         AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuItem.getMenuInfo();
!         MusicDirectory.Entry entry = (MusicDirectory.Entry) entryList.getItemAtPosition(info.position);
!         switch (menuItem.getItemId()) {
!             case R.id.menu_play_all:
!                 downloadRecursively(entry.getId(), false, false, true);
!                 break;
!             case R.id.menu_queue_all:
!                 downloadRecursively(entry.getId(), false, true, false);
!                 break;
!             case R.id.menu_save_all:
!                 downloadRecursively(entry.getId(), true, true, false);
!                 break;
!             default:
!                 return super.onContextItemSelected(menuItem);
!         }
          return true;
      }
  
--- 213,270 ----
      @Override
      public void onCreateContextMenu(ContextMenu menu, View view, ContextMenu.ContextMenuInfo menuInfo) {
          super.onCreateContextMenu(menu, view, menuInfo);
!     	if (view == queueButton) {
              MenuInflater inflater = getMenuInflater();
!             inflater.inflate(R.menu.queue_context, menu);
!     	} else {
!             AdapterView.AdapterContextMenuInfo info =
!                 (AdapterView.AdapterContextMenuInfo) menuInfo;
!         	
!             MusicDirectory.Entry entry = (MusicDirectory.Entry) entryList.getItemAtPosition(info.position);
! 
!             if (entry.isDirectory()) {
!                 MenuInflater inflater = getMenuInflater();
!                 inflater.inflate(R.menu.select_album_context, menu);
!             } else {
!                 MenuInflater inflater = getMenuInflater();
!                 inflater.inflate(R.menu.select_song_context, menu);
!             }    		
!     	}        
      }
  
      @Override
      public boolean onContextItemSelected(MenuItem menuItem) {
!     	if (menuItem.getItemId() == R.id.menu_queue_next) {
!             download(true, false, false, true);
!             selectAll(false, false);    		
!     	} else {    		
!         	AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuItem.getMenuInfo();
!             MusicDirectory.Entry entry = (MusicDirectory.Entry) entryList.getItemAtPosition(info.position);
!             List<MusicDirectory.Entry> songs = new ArrayList<MusicDirectory.Entry>(10);
!             songs.add((MusicDirectory.Entry) entryList.getItemAtPosition(info.position));
!             switch (menuItem.getItemId()) {
!                 case R.id.menu_play_all:
!                     downloadRecursively(entry.getId(), false, false, true);
!                     break;
!                 case R.id.menu_queue_all:
!                     downloadRecursively(entry.getId(), false, true, false);
!                     break;
!                 case R.id.menu_save_all:
!                     downloadRecursively(entry.getId(), true, true, false);
!                     break;
!                 case R.id.menu_play_now:
!                 	getDownloadService().download(songs, false, true, true);
!                     break;
!                 case R.id.menu_play_next:
!                 	getDownloadService().download(songs, false, false, true);
!                     break;
!                 case R.id.menu_play_last:
!                     getDownloadService().download(songs, false, false, false);
!                     break;
!                 default:
!                     return super.onContextItemSelected(menuItem);
!             }
!     	}
          return true;
      }
  
***************
*** 379,385 ****
          return songs;
      }
  
!     private void download(final boolean append, final boolean save, final boolean autoplay) {
          if (getDownloadService() == null) {
              return;
          }
--- 406,412 ----
          return songs;
      }
  
!     private void download(final boolean append, final boolean save, final boolean autoplay, final boolean play_next) {
          if (getDownloadService() == null) {
              return;
          }
***************
*** 393,399 ****
                  }
  
                  warnIfNetworkOrStorageUnavailable();
!                 getDownloadService().download(songs, save, autoplay);
                  getDownloadService().setSuggestedPlaylistName(getIntent().getStringExtra(Constants.INTENT_EXTRA_NAME_PLAYLIST_NAME));
                  if (autoplay) {
                      Util.startActivityWithoutTransition(SelectAlbumActivity.this, DownloadActivity.class);
--- 420,426 ----
                  }
  
                  warnIfNetworkOrStorageUnavailable();
!                 getDownloadService().download(songs, save, autoplay, play_next);
                  getDownloadService().setSuggestedPlaylistName(getIntent().getStringExtra(Constants.INTENT_EXTRA_NAME_PLAYLIST_NAME));
                  if (autoplay) {
                      Util.startActivityWithoutTransition(SelectAlbumActivity.this, DownloadActivity.class);
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SubsonicTabActivity.java ./src/net/sourceforge/subsonic/androidapp/activity/SubsonicTabActivity.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/activity/SubsonicTabActivity.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/activity/SubsonicTabActivity.java	2011-06-21 09:50:27.000000000 -0700
***************
*** 287,293 ****
                          downloadService.clear();
                      }
                      warnIfNetworkOrStorageUnavailable();
!                     downloadService.download(songs, save, autoplay);
                      Util.startActivityWithoutTransition(SubsonicTabActivity.this, DownloadActivity.class);
                  }
              }
--- 287,293 ----
                          downloadService.clear();
                      }
                      warnIfNetworkOrStorageUnavailable();
!                     downloadService.download(songs, save, autoplay, false);
                      Util.startActivityWithoutTransition(SubsonicTabActivity.this, DownloadActivity.class);
                  }
              }
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/service/DownloadService.java ./src/net/sourceforge/subsonic/androidapp/service/DownloadService.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/service/DownloadService.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/service/DownloadService.java	2011-06-21 10:47:54.000000000 -0700
***************
*** 30,36 ****
   */
  public interface DownloadService {
  
!     void download(List<MusicDirectory.Entry> songs, boolean save, boolean autoplay);
  
      void setShufflePlayEnabled(boolean enabled);
  
--- 30,36 ----
   */
  public interface DownloadService {
  
!     void download(List<MusicDirectory.Entry> songs, boolean save, boolean autoplay, boolean play_next);
  
      void setShufflePlayEnabled(boolean enabled);
  
***************
*** 41,46 ****
--- 41,50 ----
      RepeatMode getRepeatMode();
  
      void setRepeatMode(RepeatMode repeatMode);
+     
+     boolean getScreenOff();
+     
+     void setScreenOff(boolean screenoff);
  
      void clear();
  
diff -crBN -x '*.svn*' ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/service/DownloadServiceImpl.java ./src/net/sourceforge/subsonic/androidapp/service/DownloadServiceImpl.java
*** ../android-release-2.8/src/net/sourceforge/subsonic/androidapp/service/DownloadServiceImpl.java	2011-06-15 14:47:22.000000000 -0700
--- ./src/net/sourceforge/subsonic/androidapp/service/DownloadServiceImpl.java	2011-06-23 09:00:33.000000000 -0700
***************
*** 80,85 ****
--- 80,87 ----
      private static DownloadService instance;
      private String suggestedPlaylistName;
      private PowerManager.WakeLock wakeLock;
+     private boolean screenoff = true;
+ 
  
      @Override
      public void onCreate() {
***************
*** 129,147 ****
      }
  
      @Override
!     public synchronized void download(List<MusicDirectory.Entry> songs, boolean save, boolean autoplay) {
          shufflePlay = false;
  
          if (songs.isEmpty()) {
              return;
          }
! 
!         for (MusicDirectory.Entry song : songs) {
!             DownloadFile downloadFile = new DownloadFile(this, song, save);
!             downloadList.add(downloadFile);
          }
!         revision++;
! 
          if (autoplay) {
              play(0);
          } else {
--- 131,159 ----
      }
  
      @Override
!     public synchronized void download(List<MusicDirectory.Entry> songs, boolean save, boolean autoplay, boolean play_next) {
          shufflePlay = false;
+         int offset = 1;
  
          if (songs.isEmpty()) {
              return;
          }
!         if (play_next) {
!         	if ((autoplay) && getCurrentPlayingIndex() >= 0) offset = 0;
!             for (MusicDirectory.Entry song : songs) {
!             	DownloadFile downloadFile = new DownloadFile(this, song, save);
!                 downloadList.add(getCurrentPlayingIndex() + offset, downloadFile);
!                 offset++;
!             }
!             revision++;
!         } else {
!             for (MusicDirectory.Entry song : songs) {
!                 DownloadFile downloadFile = new DownloadFile(this, song, save);
!                 downloadList.add(downloadFile);
!             }
!             revision++;        	
          }
!         
          if (autoplay) {
              play(0);
          } else {
***************
*** 154,160 ****
      }
  
      public void restore(List<MusicDirectory.Entry> songs, int currentPlayingIndex, int currentPlayingPosition) {
!         download(songs, false, false);
          if (currentPlayingIndex != -1) {
              play(currentPlayingIndex, false);
              if (currentPlaying.isCompleteFileAvailable()) {
--- 166,172 ----
      }
  
      public void restore(List<MusicDirectory.Entry> songs, int currentPlayingIndex, int currentPlayingPosition) {
!         download(songs, false, false, false);
          if (currentPlayingIndex != -1) {
              play(currentPlayingIndex, false);
              if (currentPlaying.isCompleteFileAvailable()) {
***************
*** 201,206 ****
--- 213,227 ----
      public void setRepeatMode(RepeatMode repeatMode) {
          Util.setRepeatMode(this, repeatMode);
      }
+     @Override
+     public boolean getScreenOff() {
+     	return screenoff;
+     }
+     
+     @Override
+     public void setScreenOff(boolean screenoff) {
+     	this.screenoff = screenoff;
+     }
  
      @Override
      public synchronized DownloadFile forSong(MusicDirectory.Entry song) {
***************
*** 769,772 ****
--- 790,794 ----
              return "BufferTask (" + downloadFile + ")";
          }
      }
+ 
  }
